DESTRUCTURING:

*const arr = [1,2,3]:
Guardo cada valor dentro de una variable,entonces cada vez que el valor deba a ser llamado, solo inicializo la misma
ejemplo:
const [uno, dos, tres] = arr 
const uno = arr[0]
const dos = arr[1]

////
const obj = {a:1, b:2, c:3}

const {a:a, b:b, c:c} = obj

//la x es inventada

OBJECT PROPERTY SHORTHAND:
Si tengo qwue escribir una propiedad, y esa propiedad vale una variable que se llama igual, no hace falta que la vuelva escribir. Se sobre entiende
{props:props} === {props}


ejemplo con funcion:

const {nombre:nombre, apellido:apellido} = props

//

Otra forma de pasar props, es cuando dentro de la funcion principal (App), mantenes la etiqueta generadora abierta (<main></main>) y dentro de la apertura, y cierre, poner el contenido. Al principio no se va a leer, porque no tiene instrucciones, solo estamos dandole como paramentro de la funcion.
Sera un children. Si tiene mas de un prop, se convierte en array de children.




///STATE: Son variables internas de un componente que se mantienen a traves de ejecucion y nos dan reactividad

//HOOKS : Funciones. Son funciones que se ejecutan en una etapa especifica de la ejecucion de un componente. 
  Hook de estado:
  -useState(): Retorna un array con dos elementros: estado y una funcion para actualizarlo.
  -useReducer
  -useRef

//Hook de efecto:

-useEffect(): Te permite hacer un efecto secundario. No posee retorno


Son funciones, por ende, despues debe ponerse ()
No pueden estar dentro de condicionales, porque no se ejecutan. Tampoco bucles
Deben estar fuera del return de un componente.

Cuando se usa un hook, si lo consologueo, lo devuelve como un array. Dentro de ese array, el primer valor es lo que esta dentro del hook, y lo segundo es la funcion

//PROMISES:
  //Promise: Es un objeto que representa una operacion aque dura en el tiempo.
-fetch():  const resultado =  operaciones()

//Tenemos otras propiedades

-resultado.then(()=>{}) Si hizo un pedido al servidor, y el servidor respondio, entonces se ejecuta el then
-resultado.catch(()=>{}) Si hizo un pedido al servidor, y el servidor no respondio, entonces se ejecuta el catch


const promesa = new Promise(()=>{

const usuarios = [{nombre:"Candelaria}, {apellido:"Aquiles}]
const resultado = true

}) 
promesa
.then(()=>{

})


//La siguiente funcion, sirve para ejecutar un efecto dentro de un determinadotiempo
//setTimeout(()=>{

}, 1000miliSegundos)

//PASOS:

1- el componente arranca
1.5 - Arrancar con un estado inicial (array vacio)
2 - Se dibuja por primera vez
3 - Hago un efecto
4 - Simulo el pedido
5 - Obtener productos
6 - Actualizar el estado
7 - Se redibuja automaticamente
8 - No tengo que volver a pedir los usuarios (que no se cree el loops)







 //MAPS

/*const arr = [1,2,3,4,5]

console.timeEnd("for")
for(let i = 0; i < arr.length; i++){
    let elemento = arr[i]
    console.log(i, elemento);
}

console.timeEnd("for")


//El metodo forEach() es una función que recorre un array y ejecuta una función para cada elemento.

console.time("forEach")
arr.forEach((elemento, i)=>{
    console.log(i, elemento);
})
console.timeEnd("forEach")


//EL METODO MAP SIEMPRE DEVUELVE UN NUEVO ARRAY. Entonces se puede guardar en una variable
const r = arr.map((elemento, i)=>{

    return elemento + 1
})


*/


//AJAX
Async Javascript and XML
**Fetch: API para pedir/enviar datos de un servidor.
**promise + HTTP + asincronia

**HTTP: HyperText Transfer Protocol

REQUEST/ CLIENTE:
URL/IP: Direccion fisica del servidor
METODO/VERBO: "Intencion del pedido" - GET, POST, PUT, PATCH, DELETE